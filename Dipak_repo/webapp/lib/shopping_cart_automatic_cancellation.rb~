require "net/http"
require "uri"
require 'net/imap'
require "xmlsimple"

class ShoppingCartAutomaticCancellation

  SHOPPING_CART_CANCELLATION_SUBJECT = ["Recurring order failed for REI Technologies"]
  MERCHANT_URL = "https://www.mcssl.com/API"
  MERCHANT_ID = { "shopping_cart" => "187322", "lah_shopping_cart" => "190165" }
  MERCHANT_KEY = { "shopping_cart" => "E9954D6100C34E109E99098FFB8167BF", "lah_shopping_cart" => "532d108f3512406a939696569b48a836" }

  def initialize
    @logger=Logger.new("#{RAILS_ROOT}/log/shopping_cart_cancellations.log")
    @config = YAML.load_file("#{RAILS_ROOT}/config/shopping_cart_email_credential.yml")
  end

  def make_changes_in_reim_as_per_sc_cancellation
    imap = Net::IMAP.new(@config['host'], 993, true)
    imap.login(@config['username'], @config['password'])
    imap.select('Inbox')
    imap.uid_search(["NOT", "SEEN"]).each do |uid|
      begin
        @logger.info "=================="
        source = imap.uid_fetch(uid, ['RFC822']).first.attr['RFC822']
        mail = TMail::Mail.parse(source)
        next unless SHOPPING_CART_CANCELLATION_SUBJECT.include?(mail.subject)

        user_email = get_detail_from_email_body(mail, "Email: ")
        order_id = get_detail_from_email_body(mail, "Order ID: ")
        @logger.info "User Email: #{user_email},  Order ID: #{order_id}"
        @user = User.find(:first, :conditions =>["email = ? or login = ?", user_email, user_email])
        @logger.info "User Not Found In REIM with email: #{user_email}" and next if @user.blank?
        @logger.info "User moved to free user class: #{user_email}" and next if @user.is_basic_user?
        @user.update_attribute(:is_user_have_access_to_reim, false)
        ShoppingCartOrderTransactionFailure.create(:user_id => @user.id, :shopping_cart_order_id_detail => order_id, :shopping_cart_user_email => user_email)

      rescue Exception=>exp
        @logger.info " something went wrong "
        @logger.info " Error 1 : (#{exp.class}) #{exp.message.inspect} "
        BackgroundJobExceptionNotifier.deliver_background_exception_notification(exp,"Icontact")
      end
    end
  end

  def get_order_by_token_id(merchant_id, token_id, key)
    uri = URI.parse("#{MERCHANT_URL}/#{merchant_id}/Orders/#{token_id}")
    @order_detail = get_response(uri, key)
  end

  def get_client_detail(merchant_id, client_id, key)
    uri = URI.parse("#{MERCHANT_URL}/#{merchant_id}/Clients/#{client_id}")
    @client_detail = get_response(uri, key)
  end

  def get_user_company_info_detail(client_detail)
    address_one = client_detail["ClientInfo"][0]["Address1"].blank? ? "" : client_detail["ClientInfo"][0]["Address1"][0]
    business_phone = client_detail["ClientInfo"][0]["Phone"].blank? ? "" : client_detail["ClientInfo"][0]["Phone"][0]
    client_city = client_detail["ClientInfo"][0]["City"].blank? ? "" : client_detail["ClientInfo"][0]["City"][0]
    client_state = client_detail["ClientInfo"][0]["StateName"].blank? ? "" : client_detail["ClientInfo"][0]["StateName"][0]
    client_zip = client_detail["ClientInfo"][0]["Zip"].blank? ? "" : client_detail["ClientInfo"][0]["Zip"][0]
    return address_one, business_phone, client_city, client_state, client_zip
  end

private

  def get_response(uri, key)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    request = Net::HTTP::Post.new(uri.request_uri)
    request.body = "<?xml version='1.0' encoding='UTF-8'?><Request><Key>#{key}</Key></Request>"
    response = http.request(request)
    return XmlSimple.xml_in(response.body)
  end

  def get_detail_from_email_body(mail, detail_info)
    return mail.body.to_s.split(detail_info)[1].to_s.split("\r")[0]
  end

end